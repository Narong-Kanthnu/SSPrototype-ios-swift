//
//  VideoFeedViewController.swift
//  SSPrototype
//
//  Created by Narong Kanthanu on 22/10/2561 BE.
//  Copyright (c) 2561 Narong Kanthanu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol VideoFeedDisplayLogic: class {
    func displayVideoFeed(viewModel: VideoFeed.VideoFeed.ViewModel)
    func displayVideoFeedIsEmpty()
}

class VideoFeedViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource, VideoFeedDisplayLogic {
    var interactor: VideoFeedBusinessLogic?
    var router: (NSObjectProtocol & VideoFeedRoutingLogic & VideoFeedDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = VideoFeedInteractor()
        let presenter = VideoFeedPresenter()
        let router = VideoFeedRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        let nib = UINib.init(nibName: "VideoFeedCell", bundle: nil)
        self.collectionView.register(nib, forCellWithReuseIdentifier: VideoFeedCell.cellId)
        loadVideoFeed()
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: Do something
    
    @IBOutlet weak var collectionView: UICollectionView!
    
    var videoFeeds: [VideoFeeds]?
    
    // MARK: - UICollectionView delegate
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return videoFeeds?.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: VideoFeedCell.cellId, for: indexPath) as! VideoFeedCell
        cell.videoFeeds = self.videoFeeds?[indexPath.item]
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        if let videoFeedCell = cell as? VideoFeedCell {
            videoFeedCell.player.play()
            videoFeedCell.videoDescription.restartLabel()
            if videoFeedCell.videoDescription.isPaused {
                videoFeedCell.videoDescription.unpauseLabel()
            }
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        if let videoFeedCell = cell as? VideoFeedCell {
            videoFeedCell.player.pause()
            videoFeedCell.videoDescription.restartLabel()
            if !videoFeedCell.videoDescription.isPaused {
                videoFeedCell.videoDescription.pauseLabel()
            }
        }
    }
    
    func loadVideoFeed() {
        interactor?.loadVideoFeed(request: VideoFeed.VideoFeed.Request())
    }
    
    func displayVideoFeed(viewModel: VideoFeed.VideoFeed.ViewModel) {
        self.videoFeeds?.removeAll()
        self.videoFeeds = viewModel.videoFeedList
        self.collectionView.reloadData()
    }
    
    func displayVideoFeedIsEmpty() {
        //Show no video data
    }
}

extension VideoFeedViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: collectionView.frame.size.width, height: collectionView.frame.size.height - 10)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 5, left: 0, bottom: 5, right: 0)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 10
    }
}
