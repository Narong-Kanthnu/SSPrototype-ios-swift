//
//  VideoFeedInteractor.swift
//  SSPrototype
//
//  Created by Narong Kanthanu on 22/10/2561 BE.
//  Copyright (c) 2561 Narong Kanthanu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON

protocol VideoFeedBusinessLogic {
    func loadVideoFeed(request: VideoFeed.VideoFeed.Request)
}

protocol VideoFeedDataStore {
    //var name: String { get set }
}

class VideoFeedInteractor: VideoFeedBusinessLogic, VideoFeedDataStore {
    var presenter: VideoFeedPresentationLogic?
    var worker: VideoFeedWorker?
    
    func loadVideoFeed(request: VideoFeed.VideoFeed.Request) {
        let videoData = parseJSON()
        
        if videoData.isEmpty {
            self.presenter?.presentVideoFeedIsEmpty()
            return
        }
        
        var videoFeedList: [VideoFeeds] = []
        for video in videoData {
            guard let videoFeed = VideoFeeds(data: video) else { return }
            videoFeedList.append(videoFeed)
        }
        
        let response = VideoFeed.VideoFeed.Response(videoFeedList: videoFeedList)
        presenter?.presentVideoFeed(response: response)
    }
    
    private func parseJSON() -> [[String: Any]] {
        var videoData: [[String: Any]] = [[:]]
        guard let path = Bundle.main.path(forResource: "videos", ofType: "json") else { return videoData }
        
        do {
            let data = try Data(contentsOf: URL(fileURLWithPath: path), options: .alwaysMapped)
            guard let jsonObj = try JSONSerialization.jsonObject(with: data, options: []) as? [[String: Any]] else { return videoData }
            videoData = jsonObj
        } catch let error {
            print("parse error: \(error.localizedDescription)")
        }
        
        return videoData
    }
}
